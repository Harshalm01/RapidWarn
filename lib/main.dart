import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';

// Import Firebase options (generated by flutterfire configure)
import 'firebase_options.dart';

// Screens
import 'screens/splash_screen.dart';
import 'screens/login_screen.dart';
import 'screens/home_screen.dart';
import 'screens/current_status_screen.dart';
import 'screens/admin_dashboard_screen.dart'; // âœ… Admin Dashboard
import 'services/notification_service.dart'; // âœ… Notification Service
import 'services/user_location_service.dart'; // âœ… User Location Service

// -------------------- THEME --------------------
final ValueNotifier<ThemeMode> themeMode = ValueNotifier(ThemeMode.system);

// -------------------- NOTIFICATIONS --------------------
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

class AppNotification {
  final String title;
  final String body;
  final DateTime timestamp;
  AppNotification({
    required this.title,
    required this.body,
    required this.timestamp,
  });
}

final List<AppNotification> notificationHistory = [];

// -------------------- FCM BACKGROUND HANDLER --------------------
Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  debugPrint("ðŸ“© Background message: ${message.messageId}");

  final notification = message.notification;
  if (notification != null) {
    // Save to history
    notificationHistory.insert(
      0,
      AppNotification(
        title: notification.title ?? "Notice",
        body: notification.body ?? "",
        timestamp: DateTime.now(),
      ),
    );

    // Show local notification
    flutterLocalNotificationsPlugin.show(
      message.hashCode,
      notification.title,
      notification.body,
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'default_channel',
          'Default',
          importance: Importance.max,
          priority: Priority.high,
          icon: '@mipmap/ic_launcher',
        ),
      ),
    );
  }
}

// -------------------- MAIN --------------------
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // âœ… Initialize Supabase
  await Supabase.initialize(
    url: 'https://qnttrmrwrenlsnpwcrkl.supabase.co',
    anonKey:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFudHRybXJ3cmVubHNucHdjcmtsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMyNTU5ODgsImV4cCI6MjA2ODgzMTk4OH0.q8qjbNxl1jkfI17JL2BqQcyy1nYekXNEEt7_EmDEpwo',
  );

  // âœ… Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // âœ… Set background handler
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  // âœ… Initialize local notifications
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');
  const InitializationSettings initializationSettings =
      InitializationSettings(android: initializationSettingsAndroid);
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);

  // âœ… Request notification permissions
  await FirebaseMessaging.instance.requestPermission(
    alert: true,
    badge: true,
    sound: true,
  );

  // âœ… Get FCM token
  final token = await FirebaseMessaging.instance.getToken();
  debugPrint("ðŸ“± FCM Token: $token");

  // âœ… Initialize NotificationService
  final notificationService = NotificationService();
  await notificationService.initialize();

  // âœ… Initialize UserLocationService for nearby user detection
  final userLocationService = UserLocationService();
  await userLocationService.initialize();
  // Start tracking location in background for disaster alerts
  await userLocationService.startLocationTracking();

  runApp(const MyApp());
}

// -------------------- APP --------------------
class MyApp extends StatefulWidget {
  const MyApp({super.key});
  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final GlobalKey<ScaffoldMessengerState> _scaffoldMessengerKey =
      GlobalKey<ScaffoldMessengerState>();
  late final RealtimeChannel _supabaseChannel;

  @override
  void initState() {
    super.initState();

    // Foreground FCM messages
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      final notification = message.notification;
      final String title =
          notification?.title ?? message.data['title'] ?? 'Notice';
      final String body = notification?.body ?? message.data['body'] ?? '';

      // Save to history
      notificationHistory.insert(
        0,
        AppNotification(
          title: title,
          body: body,
          timestamp: DateTime.now(),
        ),
      );

      // Show notification
      flutterLocalNotificationsPlugin.show(
        message.hashCode,
        title,
        body,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'default_channel',
            'Default',
            importance: Importance.max,
            priority: Priority.high,
            icon: '@mipmap/ic_launcher',
          ),
        ),
      );
    });

    // âœ… Supabase real-time subscription
    _supabaseChannel = Supabase.instance.client
        .channel('media_analysis_changes')
        .onPostgresChanges(
          event: PostgresChangeEvent.insert,
          schema: 'public',
          table: 'media_analysis',
          callback: (payload) {
            final newData = payload.newRecord;
            if (newData.isNotEmpty) {
              final status = newData['status'] ?? '';
              final url = newData['file_url'] ?? '';

              // Store supabase updates as notifications
              notificationHistory.insert(
                0,
                AppNotification(
                  title: "Media Analysis Update",
                  body: "File marked as '$status'\nURL: $url",
                  timestamp: DateTime.now(),
                ),
              );

              _scaffoldMessengerKey.currentState?.showSnackBar(
                SnackBar(
                  content: Text("ðŸ“¢ File marked as '$status'\nURL: $url"),
                  duration: const Duration(seconds: 4),
                ),
              );
            }
          },
        )
        .subscribe();
  }

  @override
  void dispose() {
    Supabase.instance.client.removeChannel(_supabaseChannel);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: themeMode,
      builder: (context, mode, _) {
        return MaterialApp(
          title: 'RapidWarn',
          debugShowCheckedModeBanner: false,
          scaffoldMessengerKey: _scaffoldMessengerKey,
          themeMode: mode,
          theme: ThemeData(
            brightness: Brightness.light,
            scaffoldBackgroundColor: const Color(0xFFF4F7FA),
            appBarTheme: const AppBarTheme(
              backgroundColor: Color(0xFFECEFF1),
              foregroundColor: Colors.black,
              elevation: 2,
              titleTextStyle: TextStyle(
                color: Colors.black,
                fontSize: 20,
                fontWeight: FontWeight.w600,
              ),
            ),
            floatingActionButtonTheme: const FloatingActionButtonThemeData(
              backgroundColor: Color(0xFF5D9CEC),
              foregroundColor: Colors.white,
              elevation: 4,
            ),
            cardColor: Colors.white,
            shadowColor: Colors.grey,
            textTheme: const TextTheme(
              bodyLarge: TextStyle(color: Colors.black87, fontSize: 16),
              bodyMedium: TextStyle(color: Colors.black54),
            ),
            fontFamily: 'Roboto',
            inputDecorationTheme: InputDecorationTheme(
              filled: true,
              fillColor: Colors.white,
              border: OutlineInputBorder(
                borderSide: BorderSide.none,
                borderRadius: BorderRadius.circular(12),
              ),
              contentPadding:
                  EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            ),
          ),
          darkTheme: ThemeData(
            brightness: Brightness.dark,
            scaffoldBackgroundColor: const Color(0xFF121212),
            appBarTheme: const AppBarTheme(
              backgroundColor: Color(0xFF1E1E1E),
              foregroundColor: Colors.white,
              elevation: 0,
            ),
            floatingActionButtonTheme: const FloatingActionButtonThemeData(
              backgroundColor: Color(0xFF80CBC4),
              foregroundColor: Colors.black,
            ),
            cardColor: Colors.grey,
            textTheme: const TextTheme(
              bodyLarge: TextStyle(color: Colors.white, fontSize: 16),
              bodyMedium: TextStyle(color: Colors.white70),
            ),
            fontFamily: 'Roboto',
          ),
          home: const SplashScreen(),
          routes: {
            '/login': (context) => const LoginScreen(),
            '/home': (context) => const HomeScreen(),
            '/current-status': (context) => const CurrentStatusScreen(),
            '/admin': (context) => const AdminDashboardScreen(),
          },
        );
      },
    );
  }
}
